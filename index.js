import * as d3 from 'd3'

function run( data ) {
    let tree = d3.quadtree( )
    tree.x( ( d ) => d.X )
    tree.y( ( d ) => d.Y )
    tree.addAll( data )
    let nodes = []
    tree.visit( ( node, x0, y0, x1, y1 ) => {
        nodes.push( { x0: x0, x1: x1, y0: y0, y1: y1 })
    }  )
    return nodes
}
// myval.run = run
let d
if ( typeof window !== 'undefined' ) {
    // d = [{X: 100, y: 100}, {X: 30, y:40}]
    let text = `{4.973372, 1.10744, 0}
{19.957821, 8.758215, 0}
{3.492955, 9.93864, 0}
{14.676199, 1.501339, 0}
{13.128804, 9.375742, 0}
{8.446928, 6.064085, 0}
{18.967846, 4.124965, 0}
{0.26372, 0.12676, 0}
{0.005968, 6.37186, 0}
{9.303762, 0.297106, 0}
{13.214276, 5.120448, 0}
{3.348005, 4.503421, 0}
{19.690085, 0.011578, 0}
{16.022924, 8.321534, 0}
{0.627089, 3.173822, 0}
{0.013007, 9.355666, 0}
{11.540869, 2.632081, 0}
{9.778443, 8.567557, 0}
{2.781502, 7.201686, 0}
{8.660275, 3.339018, 0}
{5.665467, 6.378146, 0}
{15.906909, 4.64385, 0}
{17.960651, 7.394206, 0}
{17.711343, 0.567349, 0}
{7.118425, 9.50506, 0}
{10.634448, 5.456421, 0}
{12.419838, 7.473518, 0}
{14.395883, 7.002923, 0}
{2.903355, 1.887639, 0}
{6.924056, 4.530445, 0}
{11.71426, 0.070577, 0}
{18.361761, 2.310744, 0}
{7.282503, 7.66791, 0}
{1.808839, 9.399818, 0}
{8.154788, 1.63477, 0}
{1.678236, 5.213157, 0}
{14.378062, 3.781003, 0}
{11.448506, 9.24047, 0}
{5.757758, 3.127605, 0}
{4.793484, 8.531279, 0}
{17.452447, 9.882953, 0}
{8.666615, 9.803446, 0}
{12.985701, 1.267407, 0}
{17.82605, 5.670197, 0}
{10.848699, 7.184206, 0}
{17.331726, 3.519683, 0}
{6.562671, 0.049134, 0}
{1.349127, 1.782613, 0}
{15.726462, 6.148781, 0}
{15.997527, 2.189804, 0}
{12.988786, 3.043195, 0}
{19.428343, 6.881415, 0}
{10.243242, 4.00584, 0}
{10.508239, 1.199618, 0}
{5.132343, 4.889824, 0}
{15.695816, 9.921669, 0}
{2.282967, 0.262389, 0}
{9.071179, 4.789172, 0}
{19.967665, 5.369102, 0}
{0.856061, 7.965407, 0}
{4.110648, 7.17297, 0}
{14.493307, 8.552402, 0}
{11.413831, 4.498908, 0}
{16.101913, 0.57006, 0}
{7.088925, 2.709476, 0}
{19.980322, 2.233567, 0}
{9.687931, 2.274701, 0}
{19.081702, 9.877723, 0}
{4.166201, 2.804806, 0}
{9.766012, 7.332086, 0}
{2.124541, 3.757421, 0}
{19.042675, 8.046407, 0}
{8.49653, 7.752361, 0}
{13.431292, 0.019455, 0}
{2.960042, 8.757298, 0}
{18.023331, 8.775189, 0}
{3.014855, 5.99356, 0}
{15.345988, 7.465932, 0}
{16.610979, 9.292465, 0}
{11.929878, 6.407964, 0}
{16.137503, 3.328429, 0}
{0.237821, 4.541237, 0}
{10.277612, 9.52893, 0}
{3.827983, 0.803176, 0}
{13.180172, 6.384263, 0}
{7.130768, 6.237536, 0}
{0.120116, 1.696525, 0}
{4.409704, 5.876005, 0}
{5.24179, 9.546908, 0}
{16.95949, 6.538459, 0}
{5.917727, 7.686713, 0}
{4.795322, 3.821279, 0}
{14.427747, 5.920934, 0}
{18.874802, 5.318468, 0}
{6.086217, 8.761813, 0}
{17.303197, 1.723846, 0}
{9.788392, 6.188882, 0}
{1.26047, 0.429713, 0}
{11.883929, 1.040174, 0}
{7.028581, 0.911131, 0}`
    d = text.split('\n').map( ( ( d ) => {
        let component = d.trim().replace('}', '').replace('{', '').split(',')
        return { X: component[ 0], Y: component[1] }
    }) )
    let scale = 20
    let nodes = run( d )
    let canvas = document.createElement( 'canvas' )
    let context = canvas.getContext( '2d' )
    canvas.width = 650
    canvas.height = 650
    canvas.style.display = 'block'
    canvas.style.margin = '0 auto'
    document.body.appendChild(canvas)
    context.lineWidth = 0.01
    context.strokeStyle = 'black'
    context.fillStyle = 'none'
    context.scale( scale, -scale )
    context.translate( 0, -canvas.height / scale )
    nodes.forEach( ( d ) => {
        context.strokeRect( d.x0, d.y0, (d.x1 - d.x0), (d.y1 - d.y0))
    } )
    d.forEach( ( _d ) => {
        context.beginPath()
        context.arc( _d.X, _d.Y, 1 / scale, 0, Math.PI * 2)
        context.fill()
    } )
    console.log(run( d ))
} else {
    // run( d )
}
// run( d )
// this.run = run
export { run }